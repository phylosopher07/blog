// Possible improvements:
// - Change timeline and volume slider into input sliders, reskinned
// - Change into Vue or React component
// - Be able to grab a custom title instead of "Music Song"
// - Hover over sliders to see preview of timestamp/volume change

const audioPlayer = document.querySelector(".audio-player");
const audioSource = document.querySelector("#bgm-url");

const audio = new Audio(
    audioSource.textContent
);

console.dir(audio);

audio.addEventListener(
  "loadeddata",
  () => {
    audioPlayer.querySelector(".time .length").textContent = getTimeCodeFromNum(
      audio.duration
    );
    audio.volume = .75;
  },
  false
);

//click on timeline to skip around
const timeline = audioPlayer.querySelector(".timeline");
timeline.addEventListener("click", e => {
  const timelineWidth = window.getComputedStyle(timeline).width;
  const timeToSeek = e.offsetX / parseInt(timelineWidth) * audio.duration;
  audio.currentTime = timeToSeek;
}, false);

//click volume slider to change volume
const volumeSlider = audioPlayer.querySelector(".controls .volume-slider");
var volumeClass = "fa-solid fa-volume-high";

function calcVolumeClass( newVol ) {
    audio.muted = false;
    if (newVol >= 0.5) {
        return "fa-solid fa-volume-high";
    } else if (newVol > 0.0) {
        return "fa-solid fa-volume-low";
    } else {
        audio.muted = true;
        return "fa-solid fa-volume-off";
    }
}
volumeSlider.addEventListener('click', e => {
  const sliderWidth = window.getComputedStyle(volumeSlider).width;
  const newVolume = e.offsetX / parseInt(sliderWidth);
  const volumeEl = audioPlayer.querySelector(".volume-container i");
  audio.volume = newVolume;
  audioPlayer.querySelector(".controls .volume-percentage").style.width = newVolume * 100 + '%';
  volumeEl.className = calcVolumeClass( newVolume );
  volumeClass = volumeEl.className;
}, false)

//check audio percentage and update time accordingly
setInterval(() => {
  const progressBar = audioPlayer.querySelector(".progress");
  progressBar.style.width = audio.currentTime / audio.duration * 100 + "%";
  audioPlayer.querySelector(".time .current").textContent = getTimeCodeFromNum(
    audio.currentTime
  );
}, 500);

//toggle between playing and pausing on button click
const playBtn = audioPlayer.querySelector(".play-button i");
const CD = document.getElementById("CD-icon");
playBtn.addEventListener(
  "click",
  () => {
    if (audio.paused) {
      playBtn.className = "fas fa-pause";
      CD.className = "fas fa-compact-disc fa-spin"
      audio.play();
    } else {
      playBtn.className = "fas fa-play";
      CD.className = "fas fa-compact-disc"
      audio.pause();
    }
  },
  false
);
audioPlayer.querySelector(".volume-button").addEventListener("click", () => {
  const volumeEl = audioPlayer.querySelector(".volume-container i");
  audio.muted = !audio.muted;
  if (audio.muted) {
    volumeClass = volumeEl.className;
    volumeEl.className = "fa-solid fa-volume-xmark";
  } else {
    volumeEl.className = volumeClass;
  }
});

//turn 128 seconds into 2:08
function getTimeCodeFromNum(num) {
  let seconds = parseInt(num);
  let minutes = parseInt(seconds / 60);
  seconds -= minutes * 60;
  const hours = parseInt(minutes / 60);
  minutes -= hours * 60;

  if (hours === 0) return `${minutes}:${String(seconds % 60).padStart(2, 0)}`;
  return `${String(hours).padStart(2, 0)}:${minutes}:${String(
    seconds % 60
  ).padStart(2, 0)}`;
}
